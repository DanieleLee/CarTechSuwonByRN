import { RequestWithFiles } from "#/middleware/fileParser";
import { categoriesTypes } from "#/utils/audio_category";
import { RequestHandler } from "express";
import formidable from "formidable";
import cloudinary from "#/cloud";
import Audio from "#/models/audio";
import { PopulateFavList } from "#/@types/audio";
import AutoGeneratedPlaylist from "#/models/autoGeneratedPlaylist";
import PartnerProducts from "#/models/partnerProducts";

// interface CreateAudioRequest extends RequestWithFiles {
//   body: {
//     title: string;
//     about: string;
//     category: categoriesTypes;
//   };
// }

// export const createAudio: RequestHandler = async (
//   req: CreateAudioRequest,
//   res
// ) => {
//   const { title, about, category } = req.body;
//   const poster = req.files?.poster as formidable.File;
//   const audioFile = req.files?.file as formidable.File;
//   const ownerId = req.user.id;

//   if (!audioFile)
//     return res.status(422).json({ error: "Audio file is missing!" });

//   const audioRes = await cloudinary.uploader.upload(audioFile.filepath, {
//     resource_type: "video",
//   });
//   const newAudio = new Audio({
//     title,
//     about,
//     category,
//     owner: ownerId,
//     file: { url: audioRes.secure_url, publicId: audioRes.public_id },
//   });

//   if (poster) {
//     const posterRes = await cloudinary.uploader.upload(poster.filepath, {
//       width: 300,
//       height: 300,
//       crop: "thumb",
//       gravity: "face",
//     });

//     newAudio.poster = {
//       url: posterRes.secure_url,
//       publicId: posterRes.public_id,
//     };
//   }

//   await newAudio.save();

//   res.status(201).json({
//     audio: {
//       title,
//       about,
//       file: newAudio.file.url,
//       poster: newAudio.poster?.url,
//     },
//   });
// };

export const getPartnersProducts: RequestHandler = async (req, res) => {
  let { pageNo = "0", limit = "4" } = req.query as {
    pageNo: string;
    limit: string;
  };

  const { prodTypeParam } = req.params;
  const { pNo } = req.params;

  console.log(">>>>>get partnerProducts");

  pNo !== undefined ? (pageNo = pNo) : null;

  const data = await PartnerProducts.find({
    prodType: prodTypeParam,
  })
    .skip(parseInt(pageNo) * parseInt(limit))
    .limit(parseInt(limit));
  // .sort("-createdAt");
  const partnersProducts = data.map((item) => {
    return {
      _id: item._id.toString(),
      title: item.title,
      desc: item.desc,
      price: item.price,
      img: item.img,
      poster: item.poster,
      etc: item.etc,
      partName: item.partName,
      quantity: item.quantity,
    };
  });

  res.json({ partnersProducts });
};
